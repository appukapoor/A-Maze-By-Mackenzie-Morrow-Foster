package edu.wm.cs.cs301.MackenzieMorrowFoster.ui;

import edu.wm.cs.cs301.MackenzieMorrowFoster.R;
import edu.wm.cs.cs301.MackenzieMorrowFoster.R.id;
import edu.wm.cs.cs301.MackenzieMorrowFoster.R.layout;
import edu.wm.cs.cs301.MackenzieMorrowFoster.falstad.Maze;
import edu.wm.cs.cs301.MackenzieMorrowFoster.falstad.MazePanel;
import android.app.Activity;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

public class GeneratingActivity extends Activity {
	
	//code for progressbar taken from: http://www.compiletimeerror.com/2013/09/android-progress-bar-example.html#.VY-s_WB3qgE
	private ProgressBar progressBar;
	private int progressStatus = 0;
	private TextView textView;
	private Handler handler = new Handler();
	private Intent intent;
	
	public MazePanel mazepanel;
	private Bitmap myBit;
	
	public Maze maze;

	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_generate);
		Log.v("GeneratingActivity", "Created activity_generate");

		//get the intents from AMazeActivity and pass them on to PlayActivity
		intent = getIntent();
		intent.setClass(GeneratingActivity.this, PlayActivity.class);
		
		boolean isLandscape = getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;
		int frameWidth = isLandscape ? 1280 : 786;
		int frameHeight = isLandscape ? 786 : 1280;
		
		Bitmap bitmap = Bitmap.createBitmap(frameWidth, frameHeight, Config.ARGB_8888);
		mazepanel = new MazePanel(this, myBit);

		//turn the top bar on the app screen into an action bar with an arrow that takes you back a page
		getActionBar().setDisplayHomeAsUpEnabled(true);

		//call in the method to set up the finish button
		setUpFinishButton();

		/**
		 * Setting up a progressBar to know when the maze is done generating.
		 */
		progressBar = (ProgressBar) findViewById(R.id.progressBar1);
		textView = (TextView) findViewById(R.id.textView3);

		// Start long running operation in a background thread
		new Thread(new Runnable() {
			public void run() {
				while (progressStatus < 100) {
					progressStatus += 1;
					// Update the progress bar and display the current value in the text view
					handler.post(new Runnable() {
						public void run() {
							progressBar.setProgress(progressStatus);
							textView.setText(progressStatus+"/"+progressBar.getMax());
						}
					});
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
//				startActivity(intent);
			}
		}).start();
	}	

	/**
	 * Takes the player back a screen when clicked. On the action bar.
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		if (item.getItemId() == android.R.id.home) {
			finish();
		}
		return super.onOptionsItemSelected(item);
	}
	
	public void setUpFinishButton() {
		//setting up the button with a listener
		Button finishButton = (Button) findViewById(R.id.button1);
		finishButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				Log.v("GeneratingActivity", "FinishButton was clicked");
				Toast.makeText(GeneratingActivity.this, "FinishButton: Clicked", Toast.LENGTH_SHORT).show();
				startActivity(intent);
			}
		});
	}
}